---
layout: post
title:  "Kioptrix Level 1 [DONE]"
date:   2017-06-12 13:33:27 +0100
categories: jekyll update
---

[Download this box on VulnHub](https://www.vulnhub.com/entry/kioptrix-level-1-1,22/)

Initial nmap scan: 

![Nmap screenshot]({{ site.url }}/assets/kioptrix/1/nmap1.PNG)

![Nmap screenshot]({{ site.url }}/assets/kioptrix/1/nmap2.PNG)

There's a few things running on this box:

* OpenSSH on port 22.
* Apache on port 80
* rpcbind on 111
* Samba on 139
* Apache (https) on port 443
* I think this is rpc.statd on 32768 

**Testing OpenSSH (Port 22)**
*Version 2.9p2*

Seems to be vulnerable to [CVE-2002-0083](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2002-0083) but this requires knowing credentials.
We could try brute force as I think this is old enough that there's a vuln where it won't kick us out as quickly so we can bruteforce faster, but I want to avoid brute forcing.

**Testing rpcbind (Port 111)**

Think this is vulnerable to rpcbomb, but we want a shell here not crash the vm.

**Testing Apache (Port 80/443)**
*Version ApacheHTTP 1.3.20. mod_ssl 2.8.4, OpenSSL 0.9.6b*

Lets check the webserver in the browser.

![Webserver screenshot]({{ site.url }}/assets/kioptrix/1/apache.PNG)

![Nmap screenshot]({{ site.url }}/assets/kioptrix/1/nikto.PNG)
I checked the source, ran dirb and nikto for anything I could find. 

It appears that apache/mod_ssl is vulnerable to the **OpenFuck** exploit.

{% highlight c %}
The dbm and shm session cache code in mod_ssl before 2.8.7-1.3.23, and
Apache-SSL before 1.3.22+1.46, does not properly initialize memory using
the i2d_SSL_SESSION function, which allows remote attackers to use a
buffer overflow to execute arbitrary code via a large client certificate
that is signed by a trusted Certificate Authority (CA), which produces
a large serialized session.
{% endhighlight %}

![Nmap screenshot]({{ site.url }}/assets/kioptrix/1/searchsploit.PNG)

I spent a while trying to compile a working exploit for OpenFuck on the latest Kali-Rolling, but it was referencing shared objects of an old version of SSL.* I played around with it for a while installing libssl-dev and following [this](https://paulsec.github.io/blog/2014/04/14/updating-openfuck-exploit/) guide but I didn't have any luck actually getting it to compile and I didn't really want to spend ny time fiddling around with old ssl versions. I'm pretty confident this method would work for getting a shell though. Checking uname -a after I found another method to get a shell (below) showed that priv escalations for root afterward would be really easy since the kernel version is ancient.
.
*I wrote this up like a week and a half after doing it so I can't quite remember what the issue was.

**Testing Samba (Port 139)**

Meanwhile checking the other services it seems that  Samba is vulnerable to the **trans2open** exploit.
{% highlight c %}

An anonymous user can gain remote root access due to a buffer overflow caused
   by a StrnCpy() into a char array (fname) using a non-constant length
   (namelen).

   StrnCpy(fname,pname,namelen);    /* Line 252 of smbd/trans2.c */

   In the call_trans2open function in trans2.c, the Samba StrnCpy function
   copies pname into fname using namelen. The variable namelen is assigned the
   value of strlen(pname)+1, which causes the overflow.

   The variable 'fname' is a _typedef_ pstring, which is a char with a size of
   1024. If pname is greater than 1024, you can overwrite almost anything you
   want past the 1024th byte that fits inside of sizeof(pname), or the value
   returned by SVAL(inbuf,smbd_tpscnt) in function reply_trans2(), which should
   be around 2000 bytes.
{% endhighlight %}

![Nmap screenshot]({{ site.url }}/assets/kioptrix/1/samba.PNG)

![Nmap screenshot]({{ site.url }}/assets/kioptrix/1/root.PNG)
After a little playing around with the payload (I had to set it to the generic shell_reverse_tcp in metasploit becaue I was getting SSL errors when exploiting)
I get a reverse shell, as root no less. (Ignore the deprecated metasploit script warning).

**Testing rpc.statd (Port 32768)**

Can't find any exploit for this, since the VM is based on Redhat 7,  [CVE-2000-0666](https://www.cvedetails.com/cve/CVE-2000-0666/) would be patched.

**Takeaways:**

Learned some samba enumeration stuff. Got to look up some pretty old exploits. Learned about RPC.
